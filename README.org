* Schedule Checker App
A lightweight Flask-based web application to process and visualize class schedules. This app allows users to upload schedule files, process them, and generate interactive visualizations for analysis.

** Features
- *File Upload:* Upload schedule files (e.g., Excel) via a web interface.
- *Processing:* Automatically process the uploaded file to clean and standardize the data.
- *Visualizations:*
  - Instructor-based schedule charts.
  - Room-based schedule charts.
- *Interactive Interface:* Access processed files and visualizations directly from the app.

** Requirements
- Python 3.11+
- Flask
- Pandas
- Altair
- uWSGI (for production deployment)

** Project Structure
#+BEGIN_SRC text
schedule_checker_app/
├── class_schedule
│   ├── class_schedule.py
│   ├── helper.py
│   ├── main.py
│   ├── settings.py
│   ├── utilities.py
│   └── visualisation.py
├── dockerfile
├── online_schedule_checker.py
├── processed
├── README.org
├── requirements.txt
├── run.sh
├── static
│   ├── css
│   │   └── index.css
│   └── js
│       └── index.js
└── templates
    ├── base.html
    ├── index.html
    ├── instructor_final_chart.html
    ├── room_final_chart.html
    └── view_charts.html

#+END_SRC

** Getting the code

Clone the repository:
   #+BEGIN_SRC bash
   git clone https://github.com/your-username/schedule_checker_app.git
   cd schedule_checker_app
   #+END_SRC

** Running the app in localy in dev mode   
1. Create a virtual environment and install dependencies:
   #+BEGIN_SRC bash
   python3 -m venv schedule
   source schedule/bin/activate
   pip install -r requirements.txt
   #+END_SRC
   
3. Run the app:
   #+BEGIN_SRC bash
     run.sh --dev  # dev
   #+END_SRC

3. Access the app at:
   http://localhost:5000  # dev

   
** Running with Docker for production

1. Build the Docker image:
   #+BEGIN_SRC bash
   docker build -t schedule_checker_app .
   #+END_SRC

2. Run the container:
   #+BEGIN_SRC bash
   docker run -p 9090:9090 schedule_checker_app
   #+END_SRC

To use the docker in dev mode change the dockerfile line `CMD ["bash", "./run.sh", "--prod"]` to `CMD ["bash", "./run.sh", "--dev"]` before runing the docker with the above line.
   
3. Access the app at:
   http://your-ip:9090  # prod


